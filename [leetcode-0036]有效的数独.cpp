/**
 * Creation         :       2019.07.17 15:01
 * Last Reversion   :       2019.07.17 15:01
 * Author           :       Lingyong Smile {smilelingyong@163.com}
 * File Type        :       cpp
 * -----------------------------------------------------------------
isValidSudoku（有效的数独）
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。
示例 1:
输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true

示例 2:
输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。
 * -----------------------------------------------------------------
 * Crop right @ 2019 Lingyong Smile {smilelingyong@163.com}
 */
#include <iostream>
#include <vector>
using namespace std;

/**
方法一：使用标志位
只需判断各行，格列，各3x3小正方形是否有重复数字即可。
我们可以通过设置3个标志矩阵，分别记录各行，各列，各小正方形是否出现过某个数字。
行列的标志比较好判断，只是小正方形的需要转换一下即可 board[i][j] ==> cell[3 * (i // 3) + j // 3)]
（注意：这里仅仅判断数独当前输入的是否有效，并没有判断该数独是否有解）
 */ 
bool isValidSudoku(vector<vector<char>> &board) {
    if (board.size() == 0)
        return 0;
    int m, n;
    m = board.size();
    n = board[0].size();
    vector<vector<int>> row_flag(m, vector<int>(n, 0));
    vector<vector<int>> col_flag(m, vector<int>(n, 0));
    vector<vector<int>> cell_flag(m, vector<int>(n, 0));
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            int c = board[i][j] - '1';
            if (board[i][j] >= '1' && board[i][j] <= '9') {
                if (row_flag[i][c] || col_flag[c][j] || cell_flag[(i / 3) * 3 + j / 3][c]) 
                    return false;
                row_flag[i][c] = 1;
                col_flag[c][j] = 1;
                cell_flag[(i / 3) * 3 + j / 3][c] = 1;
            }
        }
    }
    return true;
}

int main() {
    vector<vector<char>> board = 
    {{'5','3','.','.','7','.','.','.','.'},
    {'6','.','.','1','9','5','.','.','.'},
    {'.','9','8','.','.','.','.','6','.'},
    {'8','.','.','.','6','.','.','.','3'},
    {'4','.','.','8','.','3','.','.','1'},
    {'7','.','.','.','2','.','.','.','6'},
    {'.','6','.','.','.','.','2','8','.'},
    {'.','.','.','4','1','9','.','.','5'},
    {'.','.','.','.','8','.','.','7','9'}};
    cout << isValidSudoku(board) << endl;
    return 0;
}